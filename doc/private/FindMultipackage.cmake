set(PROJECT_ROOT_DIR ${CMAKE_SOURCE_DIR})

# ---------------------------------------------------------------------------------------
# Define variables 
# ---------------------------------------------------------------------------------------

# 设置目标平台
string(TOLOWER ${CMAKE_SYSTEM_NAME} TS_TARGET_PLATFORM_NAME)

# 设置目标架构名称
if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(TS_TARGET_ARCH_NAME x64)
    else()
        set(TS_TARGET_ARCH_NAME x86)
    endif()
elseif(APPLE)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(TS_TARGET_ARCH_NAME x64)
    endif()
elseif(ANDROID)
endif()

# 设置路径
set(TS_CURRENT_DIR ${CMAKE_CURRENT_LIST_DIR})
set(TS_INCLUDE_DIR ${TS_CURRENT_DIR}/include)
set(TS_LIB_DIR ${TS_CURRENT_DIR}/lib)
set(TS_LIB_PLATFORM_ARCH_DIR ${TS_LIB_DIR}/${TS_TARGET_PLATFORM_NAME}/${TS_TARGET_ARCH_NAME})

# 设置目标名称
set(TS_PACKAGE_NAME BugSplat)
set(TS_INCLUDE_FILES BugSplat.h)
set(TS_LIB_NAMES BugSplat BugSplat64)

set(TS_BUGSPLAT_LIB_NAMES BugSplat)
set(TS_BUGSPLAT64_LIB_NAMES BugSplat64)
set(TS_BUGSPLATRC_LIB_NAMES BugSplatRc)
set(TS_BUGSPLATRC64_LIB_NAMES BugSplatRc64)
set(TS_BSSNDRPT_EXE_NAMES BsSndRpt)
set(TS_BSSNDRPT64_EXE_NAMES BsSndRpt64)

set(TS_BUGSPLAT_SHARED_LIB_NAMES BugSplat.dll)
set(TS_BUGSPLAT64_SHARED_LIB_NAMES BugSplat64.dll)
set(TS_BUGSPLATRC_SHARED_LIB_NAMES BugSplatRc.dll)
set(TS_BUGSPLATRC64_SHARED_LIB_NAMES BugSplatRc64.dll)
set(TS_BSSNDRPT_SHARED_EXE_NAMES BsSndRpt.exe)
set(TS_BSSNDRPT64_SHARED_EXE_NAMES BsSndRpt64.exe)

# ---------------------------------------------------------------------------------------
# Find libraries
# ---------------------------------------------------------------------------------------

# 找到头文件
find_path(${TS_PACKAGE_NAME}_INCLUDE_DIR
    NAMES ${TS_INCLUDE_FILES}
    PATHS ${TS_INCLUDE_DIR}
    NO_CACHE
    NO_CMAKE_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PACKAGE_REGISTRY
    NO_CMAKE_BUILDS_PATH
    NO_CMAKE_SYSTEM_PATH
    NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
)

# 找到库文件
find_library(${TS_PACKAGE_NAME}_LIBRARY_RELEASE
    NAMES ${TS_LIB_NAMES}
    PATHS ${TS_LIB_PLATFORM_ARCH_DIR}/release
    NO_CACHE
    NO_CMAKE_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PACKAGE_REGISTRY
    NO_CMAKE_BUILDS_PATH
    NO_CMAKE_SYSTEM_PATH
    NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
)

find_library(${TS_PACKAGE_NAME}_LIBRARY_DEBUG
    NAMES ${TS_LIB_NAMES}
    PATHS ${TS_LIB_PLATFORM_ARCH_DIR}/debug
    NO_CACHE
    NO_CMAKE_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PACKAGE_REGISTRY
    NO_CMAKE_BUILDS_PATH
    NO_CMAKE_SYSTEM_PATH
    NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
)

include(SelectLibraryConfigurations)
select_library_configurations(${TS_PACKAGE_NAME})

# 寻找 shared 文件
macro(find_file_explicit ts_target ts_names ts_path)
    find_file(${ts_target} NAMES ${ts_names} PATHS ${ts_path}
        NO_CACHE
        NO_CMAKE_PATH
        NO_CMAKE_ENVIRONMENT_PATH
        NO_SYSTEM_ENVIRONMENT_PATH
        NO_CMAKE_PACKAGE_REGISTRY
        NO_CMAKE_BUILDS_PATH
        NO_CMAKE_SYSTEM_PATH
        NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
    )
endmacro()

if(${TS_TARGET_ARCH_NAME} STREQUAL "x86") 
    find_file_explicit(${TS_BUGSPLAT_LIB_NAMES}_DLL_DEBUG ${TS_BUGSPLAT_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    find_file_explicit(${TS_BUGSPLATRC_LIB_NAMES}_DLL_DEBUG ${TS_BUGSPLATRC_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    find_file_explicit(${TS_BSSNDRPT_EXE_NAMES}_DLL_DEBUG ${TS_BSSNDRPT_SHARED_EXE_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BUGSPLAT_LIB_NAMES}_DLL_DEBUG})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BUGSPLATRC_LIB_NAMES}_DLL_DEBUG})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BSSNDRPT_EXE_NAMES}_DLL_DEBUG})
    find_file_explicit(${TS_BUGSPLAT_LIB_NAMES}_DLL_RELEASE ${TS_BUGSPLAT_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    find_file_explicit(${TS_BUGSPLATRC_LIB_NAMES}_DLL_RELEASE ${TS_BUGSPLATRC_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    find_file_explicit(${TS_BSSNDRPT_EXE_NAMES}_DLL_RELEASE ${TS_BSSNDRPT_SHARED_EXE_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BUGSPLAT_LIB_NAMES}_DLL_RELEASE})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BUGSPLATRC_LIB_NAMES}_DLL_RELEASE})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BSSNDRPT_EXE_NAMES}_DLL_RELEASE})
else()
    find_file_explicit(${TS_BUGSPLAT64_LIB_NAMES}_DLL_DEBUG ${TS_BUGSPLAT64_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    find_file_explicit(${TS_BUGSPLATRC64_LIB_NAMES}_DLL_DEBUG ${TS_BUGSPLATRC64_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    find_file_explicit(${TS_BSSNDRPT64_EXE_NAMES}_DLL_DEBUG ${TS_BSSNDRPT64_SHARED_EXE_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/debug)
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BUGSPLAT64_LIB_NAMES}_DLL_DEBUG})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BUGSPLATRC64_LIB_NAMES}_DLL_DEBUG})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_DEBUG ${${TS_BSSNDRPT64_EXE_NAMES}_DLL_DEBUG})
    find_file_explicit(${TS_BUGSPLAT64_LIB_NAMES}_DLL_RELEASE ${TS_BUGSPLAT64_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    find_file_explicit(${TS_BUGSPLATRC64_LIB_NAMES}_DLL_RELEASE ${TS_BUGSPLATRC64_SHARED_LIB_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    find_file_explicit(${TS_BSSNDRPT64_EXE_NAMES}_DLL_RELEASE ${TS_BSSNDRPT64_SHARED_EXE_NAMES} ${TS_LIB_PLATFORM_ARCH_DIR}/release)
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BUGSPLAT64_LIB_NAMES}_DLL_RELEASE})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BUGSPLATRC64_LIB_NAMES}_DLL_RELEASE})
    list(APPEND ${TS_PACKAGE_NAME}_DLL_RELEASE ${${TS_BSSNDRPT64_EXE_NAMES}_DLL_RELEASE})
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(${TS_PACKAGE_NAME}
    FOUND_VAR ${TS_PACKAGE_NAME}_FOUND
    REQUIRED_VARS
    ${TS_PACKAGE_NAME}_LIBRARY
    ${TS_PACKAGE_NAME}_INCLUDE_DIR
)

if(${TS_PACKAGE_NAME}_FOUND)
    if(NOT TARGET ${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME})
        add_library(${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} UNKNOWN IMPORTED)
    endif()

    if(${TS_PACKAGE_NAME}_LIBRARY_RELEASE)
        set_property(TARGET ${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} APPEND PROPERTY
            IMPORTED_CONFIGURATIONS RELEASE
        )
        set_target_properties(${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} PROPERTIES
            IMPORTED_LOCATION_RELEASE "${${TS_PACKAGE_NAME}_LIBRARY_RELEASE}"
        )
    endif()

    if(${TS_PACKAGE_NAME}_LIBRARY_DEBUG)
        set_property(TARGET ${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} APPEND PROPERTY
            IMPORTED_CONFIGURATIONS DEBUG
        )
        set_target_properties(${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} PROPERTIES
            IMPORTED_LOCATION_DEBUG "${${TS_PACKAGE_NAME}_LIBRARY_DEBUG}"
        )
    endif()

    set_target_properties(${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME} PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${${TS_PACKAGE_NAME}_INCLUDE_DIR}/.."
    )
endif()

mark_as_advanced(
    ${TS_PACKAGE_NAME}_INCLUDE_DIR
    ${TS_PACKAGE_NAME}_LIBRARY
    ${TS_PACKAGE_NAME}_SHARED_LIBRARIES_DEBUG
    ${TS_PACKAGE_NAME}_SHARED_LIBRARIES_RELEASE
)

if(${TS_PACKAGE_NAME}_FOUND)
    set(${TS_PACKAGE_NAME}_TARGET ${TS_PACKAGE_NAME}::${TS_PACKAGE_NAME})
    set(${TS_PACKAGE_NAME}_INCLUDE_DIRS ${${TS_PACKAGE_NAME}_INCLUDE_DIR})
    set(${TS_PACKAGE_NAME}_LIBRARY_DIRS ${TS_LIB_PLATFORM_ARCH_DIR})
    set(${TS_PACKAGE_NAME}_LIBRARIES ${${TS_PACKAGE_NAME}_LIBRARY})
    set(${TS_PACKAGE_NAME}_SHARED_LIBRARIES_DEBUG ${${TS_PACKAGE_NAME}_DLL_DEBUG})
    set(${TS_PACKAGE_NAME}_SHARED_LIBRARIES_RELEASE ${${TS_PACKAGE_NAME}_DLL_RELEASE})
endif()